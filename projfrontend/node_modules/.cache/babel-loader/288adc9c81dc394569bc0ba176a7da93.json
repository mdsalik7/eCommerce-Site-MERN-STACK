{"ast":null,"code":"var _jsxFileName = \"E:\\\\Codes\\\\lcomernbootcamp\\\\projfrontend\\\\src\\\\user\\\\Signup.js\";\nimport React, { useState } from 'react';\nimport Base from '../core/Base';\nimport { Link } from 'react-router-dom';\nimport { signup } from \"../auth/helper\";\n\nconst Signup = () => {\n  //State is used to store the data that are coming up from form before actually we are submitting it to the database\n  const [values, setValues] = useState({\n    name: \"\",\n    email: \"\",\n    password: \"\",\n    error: \"\",\n    success: false\n  }); //watever we have put in the useState is part of values, so if we want to access anything we have to use values.name,\n  //values.email etc so instead of calling values. every time we ll use deconstructing\n\n  const {\n    name,\n    email,\n    password,\n    error,\n    success\n  } = values; //when somebody types something into the form and we want to get exactly what he is typing and want to put this into\n  //the store, handleChange will be the method for this\n\n  const handleChange = name => event => {\n    //we dont directly manipulate the values(name,email,password) we use set in react\n    //setValues takes the values you want to manipulate, ...values loads all the existing values, then we say error\n    //as false because we are going to render something based on this error element, now we are going to pass multiple\n    //values from name and watever is the value replace with event.target.value, which means \"name\", \"email\" .. below\n    setValues({ ...values,\n      error: false,\n      [name]: event.target.value\n    });\n  }; //when someone clicks the submit button\n\n\n  const onSubmit = event => {\n    //the default action on when you submit the form it takes it somewhere it is just prevented so we can do other stuff\n    event.preventDefault(); //load all values and make the error false so we can show some stuff based on that\n\n    setValues({ ...values,\n      error: false\n    }); //as we have defined signup in auth/helper/index.js, it takes user and stringify it but we can get it directly\n\n    signup({\n      name,\n      email,\n      password\n    }) //since this method automatically fires a request to the backend and just give response and error\n    .then(data => {\n      //if then happens obviously we get a data as back response\n      if (data.error) {\n        //the data has either values or error, if there is error load all values and set the error whatever \n        //the error is and succes ll be false\n        setValues({ ...values,\n          error: data.error,\n          success: false\n        });\n      } else {\n        //if no error, load all the values, and reset everything as everything is still there in the box where we have written the info\n        setValues({ ...values,\n          name: \"\",\n          email: \"\",\n          password: \"\",\n          error: \"\",\n          success: true\n        });\n      }\n    }).catch(console.log(\"Error in SignUp\"));\n  };\n\n  const signUpForm = () => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-md-6 offset-sm-3 text-left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      className: \"text-light\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 29\n      }\n    }, \"Name\"), /*#__PURE__*/React.createElement(\"input\", {\n      className: \"form-control\",\n      onChange: handleChange(\"name\"),\n      type: \"text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      className: \"text-light\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 29\n      }\n    }, \"Email\"), /*#__PURE__*/React.createElement(\"input\", {\n      className: \"form-control\",\n      onChange: handleChange(\"email\"),\n      type: \"email\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      className: \"text-light\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 29\n      }\n    }, \"Password\"), /*#__PURE__*/React.createElement(\"input\", {\n      className: \"form-control\",\n      onChange: handleChange(\"password\"),\n      type: \"password\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-success btn-block\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 25\n      }\n    }, \"Submit\"))));\n  };\n\n  return /*#__PURE__*/React.createElement(Base, {\n    title: \"SignUp Page\",\n    description: \"A page for user to SignUp!\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  }, signUpForm(), \"p.text-white.text-c\");\n};\n\nexport default Signup;","map":{"version":3,"sources":["E:/Codes/lcomernbootcamp/projfrontend/src/user/Signup.js"],"names":["React","useState","Base","Link","signup","Signup","values","setValues","name","email","password","error","success","handleChange","event","target","value","onSubmit","preventDefault","then","data","catch","console","log","signUpForm"],"mappings":"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","sourcesContent":["import React, {useState} from 'react'\r\nimport Base from '../core/Base'\r\nimport {Link} from 'react-router-dom'\r\nimport {signup} from \"../auth/helper\"\r\n\r\n\r\nconst Signup = () => {\r\n    //State is used to store the data that are coming up from form before actually we are submitting it to the database\r\n    const [values, setValues] = useState({\r\n        name : \"\",\r\n        email : \"\",\r\n        password : \"\",\r\n        error : \"\",\r\n        success : false\r\n    }) \r\n    //watever we have put in the useState is part of values, so if we want to access anything we have to use values.name,\r\n    //values.email etc so instead of calling values. every time we ll use deconstructing\r\n    const {name, email, password, error, success} = values\r\n\r\n    //when somebody types something into the form and we want to get exactly what he is typing and want to put this into\r\n    //the store, handleChange will be the method for this\r\n    const handleChange = name => event => {\r\n        //we dont directly manipulate the values(name,email,password) we use set in react\r\n        //setValues takes the values you want to manipulate, ...values loads all the existing values, then we say error\r\n        //as false because we are going to render something based on this error element, now we are going to pass multiple\r\n        //values from name and watever is the value replace with event.target.value, which means \"name\", \"email\" .. below\r\n        setValues({...values, error : false, [name] : event.target.value})\r\n    } \r\n\r\n    //when someone clicks the submit button\r\n    const onSubmit = event => {\r\n        //the default action on when you submit the form it takes it somewhere it is just prevented so we can do other stuff\r\n        event.preventDefault()\r\n        //load all values and make the error false so we can show some stuff based on that\r\n        setValues({...values, error : false})\r\n        //as we have defined signup in auth/helper/index.js, it takes user and stringify it but we can get it directly\r\n        signup({name, email, password})\r\n        //since this method automatically fires a request to the backend and just give response and error\r\n        .then(data => {\r\n            //if then happens obviously we get a data as back response\r\n            if(data.error){\r\n                //the data has either values or error, if there is error load all values and set the error whatever \r\n                //the error is and succes ll be false\r\n                setValues({...values, error : data.error, success : false})\r\n            } else {\r\n                //if no error, load all the values, and reset everything as everything is still there in the box where we have written the info\r\n                setValues({\r\n                    ...values,\r\n                    name : \"\",\r\n                    email : \"\",\r\n                    password : \"\",\r\n                    error : \"\",\r\n                    success : true\r\n                })\r\n            }\r\n        })\r\n        .catch(console.log(\"Error in SignUp\"))\r\n    }\r\n\r\n\r\n    const signUpForm = () => {\r\n        return(\r\n            <div className=\"row\">\r\n                <div className=\"col-md-6 offset-sm-3 text-left\">\r\n                    <form>\r\n                        <div className=\"form-group\">\r\n                            <label className=\"text-light\">Name</label>\r\n                            <input className=\"form-control\" onChange={handleChange(\"name\")} type=\"text\"/>\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label className=\"text-light\">Email</label>\r\n                            <input className=\"form-control\" onChange={handleChange(\"email\")} type=\"email\"/>\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label className=\"text-light\">Password</label>\r\n                            <input className=\"form-control\" onChange={handleChange(\"password\")} type=\"password\"/>\r\n                        </div>\r\n                        <button className=\"btn btn-success btn-block\">Submit</button>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n    return(\r\n        <Base title=\"SignUp Page\" description=\"A page for user to SignUp!\">\r\n        {signUpForm()}\r\n        p.text-white.text-c\r\n        </Base>\r\n    )\r\n}\r\n\r\nexport default Signup;"]},"metadata":{},"sourceType":"module"}
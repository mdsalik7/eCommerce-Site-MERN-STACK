{"ast":null,"code":"//importing API from backend.js\nimport { API } from '../../backend'; //this signup is going to take user as a parameter which ll come as a json from the frontend\n\nexport const signup = user => {\n  //talking to the DB by API call\n  //signup is the route that we created for signing up and when we do this signup we need to pass some information\n  return fetch(`${API}/signup`, {\n    //since we are passing information to the DB so method is POST\n    method: \"POST\",\n    //Our application expects headers and stuff\n    headers: {\n      //whatever we used to mention in our POSTMAN\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    //the most information to pass on is the body, and will pass the Json of the user\n    body: JSON.stringify(user)\n  }) //if everything goes succes, we ll get a response back\n  .then(response => {\n    //so whatever the response is coming up we are converting it to json and just giving it back to frontend \n    return response.json();\n  }) //if fail\n  .catch(err => console.log(err));\n};\nexport const signin = user => {\n  return fetch(`${API}/signin`, {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(user)\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n}; //we taken and handled a json response in signin, but browser doesnt remember this json response, so we have to do some\n//stuff to make sure that user is continuosly signed in  once he hit the signin route successfuly so well create a\n//authenticate method - this ll set a token \"jwt\" when the user successfuly signin \n\nexport const authenticate = (data, next) => {\n  //if window object is not undefined, simply widow object is accessible to us\n  if (typeof window !== \"undefined\") {\n    //if 'if' statement is true then access the local storage of the react and set the jwt token with json.stringify(data)\n    localStorage.setItem(\"jwt\", JSON.stringify(data));\n    next();\n  }\n};\nexport const signout = next => {\n  if (typeof window !== \"undefined\") {\n    //remove the set \"jwt\" token\n    localStorage.removeItem(\"jwt\");\n    next(); //we also need to logout the user from backend\n\n    return fetch(`${API}/signout`, {\n      method: \"GET\"\n    }).then(response => console.log(\"SignOut Success\")).catch(err => console.log(err));\n  }\n}; //validation if the user is signed in or not","map":{"version":3,"sources":["E:/Codes/lcomernbootcamp/projfrontend/src/auth/helper/index.js"],"names":["API","signup","user","fetch","method","headers","Accept","body","JSON","stringify","then","response","json","catch","err","console","log","signin","authenticate","data","next","window","localStorage","setItem","signout","removeItem"],"mappings":"AAAA;AACA,SAAQA,GAAR,QAAkB,eAAlB,C,CAEA;;AACA,OAAO,MAAMC,MAAM,GAAGC,IAAI,IAAI;AAC1B;AACA;AAEA,SAAOC,KAAK,CAAE,GAAEH,GAAI,SAAR,EAAkB;AAC1B;AACAI,IAAAA,MAAM,EAAG,MAFiB;AAG1B;AACAC,IAAAA,OAAO,EAAG;AACN;AACAC,MAAAA,MAAM,EAAG,kBAFH;AAGN,sBAAiB;AAHX,KAJgB;AAS1B;AACAC,IAAAA,IAAI,EAAGC,IAAI,CAACC,SAAL,CAAeP,IAAf;AAVmB,GAAlB,CAAL,CAYP;AAZO,GAaNQ,IAbM,CAaDC,QAAQ,IAAI;AACd;AACA,WAAOA,QAAQ,CAACC,IAAT,EAAP;AACH,GAhBM,EAiBP;AAjBO,GAkBNC,KAlBM,CAkBAC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAlBP,CAAP;AAmBH,CAvBM;AAyBP,OAAO,MAAMG,MAAM,GAAGf,IAAI,IAAI;AAC1B,SAAOC,KAAK,CAAE,GAAEH,GAAI,SAAR,EAAkB;AAC1BI,IAAAA,MAAM,EAAG,MADiB;AAE1BC,IAAAA,OAAO,EAAG;AACNC,MAAAA,MAAM,EAAG,kBADH;AAEN,sBAAiB;AAFX,KAFgB;AAM1BC,IAAAA,IAAI,EAAGC,IAAI,CAACC,SAAL,CAAeP,IAAf;AANmB,GAAlB,CAAL,CAQNQ,IARM,CAQDC,QAAQ,IAAI;AACd,WAAOA,QAAQ,CAACC,IAAT,EAAP;AACH,GAVM,EAWNC,KAXM,CAWAC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAXP,CAAP;AAYH,CAbM,C,CAeP;AACA;AACA;;AACA,OAAO,MAAMI,YAAY,GAAG,CAACC,IAAD,EAAOC,IAAP,KAAgB;AACxC;AACA,MAAG,OAAOC,MAAP,KAAkB,WAArB,EAAiC;AAC7B;AACAC,IAAAA,YAAY,CAACC,OAAb,CAAqB,KAArB,EAA4Bf,IAAI,CAACC,SAAL,CAAeU,IAAf,CAA5B;AACAC,IAAAA,IAAI;AACP;AACJ,CAPM;AAUP,OAAO,MAAMI,OAAO,GAAGJ,IAAI,IAAI;AAC3B,MAAG,OAAOC,MAAP,KAAkB,WAArB,EAAiC;AAC7B;AACAC,IAAAA,YAAY,CAACG,UAAb,CAAwB,KAAxB;AACAL,IAAAA,IAAI,GAHyB,CAK7B;;AACA,WAAOjB,KAAK,CAAE,GAAEH,GAAI,UAAR,EAAmB;AAC3BI,MAAAA,MAAM,EAAG;AADkB,KAAnB,CAAL,CAGNM,IAHM,CAGDC,QAAQ,IAAII,OAAO,CAACC,GAAR,CAAY,iBAAZ,CAHX,EAINH,KAJM,CAIAC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAJP,CAAP;AAKH;AACJ,CAbM,C,CAeP","sourcesContent":["//importing API from backend.js\r\nimport {API} from '../../backend'\r\n\r\n//this signup is going to take user as a parameter which ll come as a json from the frontend\r\nexport const signup = user => {\r\n    //talking to the DB by API call\r\n    //signup is the route that we created for signing up and when we do this signup we need to pass some information\r\n\r\n    return fetch(`${API}/signup`, {\r\n        //since we are passing information to the DB so method is POST\r\n        method : \"POST\",\r\n        //Our application expects headers and stuff\r\n        headers : {\r\n            //whatever we used to mention in our POSTMAN\r\n            Accept : \"application/json\",\r\n            \"Content-Type\" : \"application/json\"\r\n        },\r\n        //the most information to pass on is the body, and will pass the Json of the user\r\n        body : JSON.stringify(user)\r\n    })\r\n    //if everything goes succes, we ll get a response back\r\n    .then(response => {\r\n        //so whatever the response is coming up we are converting it to json and just giving it back to frontend \r\n        return response.json()\r\n    })\r\n    //if fail\r\n    .catch(err => console.log(err))\r\n}\r\n\r\nexport const signin = user => {\r\n    return fetch(`${API}/signin`, {\r\n        method : \"POST\",\r\n        headers : {\r\n            Accept : \"application/json\",\r\n            \"Content-Type\" : \"application/json\"\r\n        },\r\n        body : JSON.stringify(user)\r\n    })\r\n    .then(response => {\r\n        return response.json()\r\n    })\r\n    .catch(err => console.log(err))\r\n}\r\n\r\n//we taken and handled a json response in signin, but browser doesnt remember this json response, so we have to do some\r\n//stuff to make sure that user is continuosly signed in  once he hit the signin route successfuly so well create a\r\n//authenticate method - this ll set a token \"jwt\" when the user successfuly signin \r\nexport const authenticate = (data, next) => {\r\n    //if window object is not undefined, simply widow object is accessible to us\r\n    if(typeof window !== \"undefined\"){\r\n        //if 'if' statement is true then access the local storage of the react and set the jwt token with json.stringify(data)\r\n        localStorage.setItem(\"jwt\", JSON.stringify(data))\r\n        next()\r\n    }\r\n}\r\n\r\n\r\nexport const signout = next => {\r\n    if(typeof window !== \"undefined\"){\r\n        //remove the set \"jwt\" token\r\n        localStorage.removeItem(\"jwt\")\r\n        next()\r\n\r\n        //we also need to logout the user from backend\r\n        return fetch(`${API}/signout`, {\r\n            method : \"GET\"\r\n        })\r\n        .then(response => console.log(\"SignOut Success\"))\r\n        .catch(err => console.log(err)) \r\n    }\r\n}\r\n\r\n//validation if the user is signed in or not\r\n\r\n"]},"metadata":{},"sourceType":"module"}
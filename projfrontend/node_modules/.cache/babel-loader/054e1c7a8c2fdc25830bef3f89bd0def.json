{"ast":null,"code":"var _jsxFileName = \"E:\\\\Codes\\\\lcomernbootcamp\\\\projfrontend\\\\src\\\\admin\\\\UpdateProduct.js\";\nimport React, { useState, useEffect } from 'react';\nimport Base from '../core/Base';\nimport { Link } from 'react-router-dom';\nimport { getCategories, getProduct, updateProduct } from './helper/adminapicall';\nimport { isAuthenticated } from '../auth/helper'; //same as AddProduct.js just with few changes\n//whenever we need to take anything from the url in the react itself there is a proper method we have to follow,\n//and that one thing to extract things from url is match but its actually a\n\nconst UpdateProduct = ({\n  match\n}) => {\n  const {\n    user,\n    token\n  } = isAuthenticated();\n  const [values, setValues] = useState({\n    name: \"\",\n    description: \"\",\n    price: \"\",\n    stock: \"\",\n    photo: \"\",\n    categories: [],\n    category: \"\",\n    loading: false,\n    error: \"\",\n    createdProduct: \"\",\n    getaRedirect: false,\n    formData: \"\" //Object of form data, so all of these information can be submitted to the backend\n\n  });\n  const {\n    name,\n    description,\n    price,\n    stock,\n    categories,\n    category,\n    loading,\n    error,\n    createdProduct,\n    getaRedirect,\n    formData\n  } = values;\n\n  const preload = productId => {\n    //getProduct from adminapicalls requires productId which needs to be passed on\n    getProduct(productId).then(data => {\n      if (data.error) {\n        setValues({ ...values,\n          error: data.error\n        });\n      } else {\n        setValues({ //since we are updating the values so in the form its not gonna be empty we ll be setting up the values\n          //that we load up from the database\n          ...values,\n          //name is gonna be data.name which is gonna come from the backend\n          name: data.name,\n          description: data.description,\n          price: data.price,\n          category: data.category._id,\n          stock: data.stock,\n          //form prepared to setup things\n          formData: new FormData()\n        });\n      }\n    });\n  }; //syntax for useEffect\n\n\n  useEffect(() => {\n    preload();\n  }, []); //todo\n\n  const onSubmit = event => {\n    event.preventDefault();\n    setValues({ ...values,\n      error: \"\",\n      loading: true\n    });\n    updateProduct(user._id, token, formData).then(data => {\n      if (data.error) {\n        setValues({ ...values,\n          error: data.error\n        });\n      } else {\n        setValues({ ...values,\n          name: \"\",\n          description: \"\",\n          price: \"\",\n          photo: \"\",\n          stock: \"\",\n          loading: false,\n          createdProduct: data.name //createdProduct is just to get a popup that product is created successfully\n\n        });\n      }\n    });\n  };\n\n  const handleChange = name => event => {\n    //if value isequal to name which is equal to the photo that we are creating then do event.target.file, \n    //file comes with properties like jpeg size and all .. [0] means the path of the file so i can load up here\n    const value = name === \"photo\" ? event.target.files[0] : event.target.value;\n    formData.set(name, value);\n    setValues({ ...values,\n      [name]: value\n    });\n  };\n\n  const successMessage = () => /*#__PURE__*/React.createElement(\"div\", {\n    className: \"alert alert-success mt-3\",\n    style: {\n      display: createdProduct ? \"\" : \"none\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }\n  }, createdProduct, \" created successfully\")); //errorMessage\n  //getaRedirect\n  //downloaded from 16.5\n\n\n  const createProductForm = () => /*#__PURE__*/React.createElement(\"form\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 11\n    }\n  }, \"Post photo\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    className: \"btn btn-block btn-success\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    onChange: handleChange(\"photo\"),\n    type: \"file\",\n    name: \"photo\",\n    accept: \"image\",\n    placeholder: \"choose a file\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 15\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    onChange: handleChange(\"name\"),\n    name: \"photo\",\n    className: \"form-control\",\n    placeholder: \"Name\",\n    value: name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"textarea\", {\n    onChange: handleChange(\"description\"),\n    name: \"photo\",\n    className: \"form-control\",\n    placeholder: \"Description\",\n    value: description,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    onChange: handleChange(\"price\"),\n    type: \"number\",\n    className: \"form-control\",\n    placeholder: \"Price\",\n    value: price,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"select\", {\n    onChange: handleChange(\"category\"),\n    className: \"form-control\",\n    placeholder: \"Category\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 15\n    }\n  }, \"Select\"), categories && categories.map((cate, index) => /*#__PURE__*/React.createElement(\"option\", {\n    key: index,\n    value: cate._id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 15\n    }\n  }, cate.name)))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    onChange: handleChange(\"stock\"),\n    type: \"number\",\n    className: \"form-control\",\n    placeholder: \"Stock\",\n    value: stock,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    onClick: onSubmit,\n    className: \"btn btn-outline-success mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 11\n    }\n  }, \"Create Product\"));\n\n  return /*#__PURE__*/React.createElement(Base, {\n    title: \"Add a Product Here\",\n    description: \"Welcome To Product Creation Section\",\n    className: \"container bg-info p-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Link, {\n    to: \"/admin/dashboard\",\n    className: \"btn btn-md btn-dark mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }\n  }, \"Admin Home\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row bg-dark text-white rounded\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-md-8 offset-md-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 11\n    }\n  }, successMessage(), createProductForm())));\n};\n\nexport default UpdateProduct;","map":{"version":3,"sources":["E:/Codes/lcomernbootcamp/projfrontend/src/admin/UpdateProduct.js"],"names":["React","useState","useEffect","Base","Link","getCategories","getProduct","updateProduct","isAuthenticated","UpdateProduct","match","user","token","values","setValues","name","description","price","stock","photo","categories","category","loading","error","createdProduct","getaRedirect","formData","preload","productId","then","data","_id","FormData","onSubmit","event","preventDefault","handleChange","value","target","files","set","successMessage","display","createProductForm","map","cate","index"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react'\r\nimport Base from '../core/Base'\r\nimport { Link } from 'react-router-dom'\r\nimport { getCategories, getProduct, updateProduct } from './helper/adminapicall'\r\nimport { isAuthenticated } from '../auth/helper'\r\n\r\n//same as AddProduct.js just with few changes\r\n//whenever we need to take anything from the url in the react itself there is a proper method we have to follow,\r\n//and that one thing to extract things from url is match but its actually a\r\nconst UpdateProduct = ({match}) => {\r\n\r\n  const {user, token} = isAuthenticated()\r\n\r\n  const [values, setValues] = useState({\r\n    name : \"\",\r\n    description : \"\",\r\n    price : \"\",\r\n    stock : \"\",\r\n    photo : \"\",\r\n    categories : [],\r\n    category : \"\",\r\n    loading : false,\r\n    error : \"\",\r\n    createdProduct : \"\",\r\n    getaRedirect : false,\r\n    formData : \"\" //Object of form data, so all of these information can be submitted to the backend\r\n    })\r\n\r\n  const {name, description, price, stock, categories, category, loading, error, createdProduct, getaRedirect, formData} = values\r\n\r\n  const preload = (productId) => {\r\n    //getProduct from adminapicalls requires productId which needs to be passed on\r\n    getProduct(productId).then(data => {\r\n      if(data.error){\r\n        setValues({...values, error : data.error})\r\n      } else {\r\n        setValues({\r\n            //since we are updating the values so in the form its not gonna be empty we ll be setting up the values\r\n            //that we load up from the database\r\n            ...values,\r\n            //name is gonna be data.name which is gonna come from the backend\r\n            name : data.name,\r\n            description : data.description,\r\n            price : data.price,\r\n            category : data.category._id,\r\n            stock : data.stock,\r\n            //form prepared to setup things\r\n            formData : new FormData()\r\n        })\r\n      }\r\n    })\r\n  }\r\n\r\n  //syntax for useEffect\r\n  useEffect(() => {\r\n    preload()\r\n  }, [])\r\n\r\n\r\n  //todo\r\n  const onSubmit = (event) => {\r\n    event.preventDefault()\r\n    setValues({...values, error : \"\", loading : true})\r\n    updateProduct(user._id, token, formData)\r\n    .then(data => {\r\n      if(data.error){\r\n        setValues({...values, error : data.error})\r\n      } else {\r\n        setValues({\r\n          ...values,\r\n          name : \"\",\r\n          description : \"\",\r\n          price : \"\",\r\n          photo : \"\",\r\n          stock : \"\",\r\n          loading : false,\r\n          createdProduct : data.name //createdProduct is just to get a popup that product is created successfully\r\n\r\n        })\r\n      }\r\n    })\r\n  }\r\n\r\n  const handleChange = name => event => {\r\n    //if value isequal to name which is equal to the photo that we are creating then do event.target.file, \r\n    //file comes with properties like jpeg size and all .. [0] means the path of the file so i can load up here\r\n    const value = name === \"photo\" ? event.target.files[0] : event.target.value\r\n    formData.set(name, value)\r\n    setValues({...values, [name] : value})\r\n  }\r\n\r\n  const successMessage = () => (\r\n    <div className=\"alert alert-success mt-3\" style={{display : createdProduct ? \"\" : \"none\"}}>\r\n      <h4>{createdProduct} created successfully</h4>\r\n    </div>\r\n  )\r\n\r\n  //errorMessage\r\n\r\n\r\n\r\n  //getaRedirect\r\n\r\n\r\n\r\n\r\n    //downloaded from 16.5\r\n  const createProductForm = () => (\r\n    <form >\r\n          <span>Post photo</span>\r\n          <div className=\"form-group\">\r\n            <label className=\"btn btn-block btn-success\">\r\n              <input\r\n                onChange={handleChange(\"photo\")}\r\n                type=\"file\"\r\n                name=\"photo\"\r\n                accept=\"image\"\r\n                placeholder=\"choose a file\"\r\n              />\r\n            </label>\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <input\r\n              onChange={handleChange(\"name\")}\r\n              name=\"photo\"\r\n              className=\"form-control\"\r\n              placeholder=\"Name\"\r\n              value={name}\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <textarea\r\n              onChange={handleChange(\"description\")}\r\n              name=\"photo\"\r\n              className=\"form-control\"\r\n              placeholder=\"Description\"\r\n              value={description}\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <input\r\n              onChange={handleChange(\"price\")}\r\n              type=\"number\"\r\n              className=\"form-control\"\r\n              placeholder=\"Price\"\r\n              value={price}\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <select\r\n              onChange={handleChange(\"category\")}\r\n              className=\"form-control\"\r\n              placeholder=\"Category\"\r\n            >\r\n              <option>Select</option>\r\n              {categories &&\r\n              categories.map((cate, index) => (\r\n              <option key={index} value={cate._id}>{cate.name}</option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <input\r\n              onChange={handleChange(\"stock\")}\r\n              type=\"number\"\r\n              className=\"form-control\"\r\n              placeholder=\"Stock\"\r\n              value={stock}\r\n            />\r\n          </div>\r\n          \r\n          <button type=\"submit\" onClick={onSubmit} className=\"btn btn-outline-success mb-3\">\r\n            Create Product\r\n          </button>\r\n        </form>\r\n  );\r\n\r\n\r\n\r\n\r\n\r\n\r\n  return (\r\n    <Base title=\"Add a Product Here\" \r\n    description=\"Welcome To Product Creation Section\"\r\n    className=\"container bg-info p-4\">\r\n      <Link to=\"/admin/dashboard\" className=\"btn btn-md btn-dark mb-3\">Admin Home</Link>\r\n        <div className=\"row bg-dark text-white rounded\">\r\n          <div className=\"col-md-8 offset-md-2\">\r\n            {successMessage()}\r\n            {createProductForm()}\r\n          </div>\r\n        </div>\r\n    </Base>\r\n  )\r\n}\r\n\r\nexport default UpdateProduct"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"E:\\\\Codes\\\\lcomernbootcamp\\\\projfrontend\\\\src\\\\user\\\\Signin.js\";\nimport React, { useState } from 'react';\nimport Base from '../core/Base';\nimport { Link, Redirect } from 'react-router-dom'; //importing index.js from auth/helper\n\nimport { signin, authenticate, isAuthenticated } from \"../auth/helper\";\n\nconst Signin = () => {\n  const [values, setValues] = useState({\n    email: \"\",\n    password: \"\",\n    error: \"\",\n    loading: false,\n    //for loading message\n    //redirect the user to user panel or admin panel based on their role, it is going to come from 'react-router-dom'\n    didRedirect: false\n  });\n  const {\n    email,\n    password,\n    error,\n    loading,\n    didRedirect\n  } = values; //isAuthenticated() returns JSON.parse entire local storage object which has this jwt, so we are holding the things\n  //that are returned \n\n  const {\n    user\n  } = isAuthenticated();\n\n  const handleChange = name => event => {\n    setValues({ ...values,\n      error: false,\n      [name]: event.target.value\n    });\n  };\n\n  const onSubmit = event => {\n    event.preventDefault();\n    setValues({ ...values,\n      error: false,\n      loading: true\n    });\n    signin({\n      email,\n      password\n    }).then(data => {\n      if (data.error) {\n        setValues({ ...values,\n          error: data.error,\n          loading: false\n        });\n      } else {\n        //authenticate is kind of middleware, and this requires to pass on the data, we just need to give the\n        //data and it will set all the values, authenticate() also has next, and whenever there is a next we can \n        //fire back a callback\n        authenticate(data, () => {\n          //and it ll clear back everythin from the input form\n          setValues({ ...values,\n            didRedirect: true\n          });\n        });\n      }\n    }).catch(console.log(\"Signin request failed\"));\n  }; //method to check wether redirect should be done or not and where to redirect\n\n\n  const perfromRedirect = () => {\n    if (didRedirect) {\n      //didRedirect is an object in our state\n      if (user && user.role === 1) {\n        //if we have a user which is coming from isAuthenticated() and user has lots of properties, \n        //if the user role is 1, that means he is an admin, so redirect him to admin panel\n        return /*#__PURE__*/React.createElement(\"p\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 24\n          }\n        }, \"Redirect To Admin\");\n      } else {\n        return /*#__PURE__*/React.createElement(\"p\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 24\n          }\n        }, \" Redirect To User Panel\");\n      }\n    }\n\n    if (isAuthenticated()) {\n      //if the user is authenticated, isAuthenticated will give a true or false, if true this ll redirect to Homepage\n      return /*#__PURE__*/React.createElement(Redirect, {\n        to: \"/\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 20\n        }\n      });\n    }\n  }; //method to display loading message\n\n\n  const loadingMessage = () => {\n    return (//loading can be true or false, and the component is always true, So based on loading things are going to work\n      //if loading is true, then T && T, and this ll execute, else F && T and it ll not execute\n      loading && /*#__PURE__*/React.createElement(\"div\", {\n        className: \"alert alert-info\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 16\n        }\n      }, /*#__PURE__*/React.createElement(\"h2\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 20\n        }\n      }, \"Loading...\"))\n    );\n  }; //method to display error message\n\n\n  const errorMessage = () => {\n    return (\n      /*#__PURE__*/\n      //flex box property of bootstap, show when there is error or show nothing\n      React.createElement(\"div\", {\n        className: \"row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-md-6 offset-sm-3 text-left\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"alert alert-danger\",\n        style: {\n          display: error ? \"\" : \"none\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 21\n        }\n      }, error)))\n    );\n  };\n\n  const signInForm = () => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-md-6 offset-sm-3 text-left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      className: \"text-light\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 29\n      }\n    }, \"Email\"), /*#__PURE__*/React.createElement(\"input\", {\n      className: \"form-control\",\n      onChange: handleChange(\"email\"),\n      type: \"email\",\n      value: email,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      className: \"text-light\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 29\n      }\n    }, \"Password\"), /*#__PURE__*/React.createElement(\"input\", {\n      className: \"form-control\",\n      onChange: handleChange(\"password\"),\n      type: \"password\",\n      value: password,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-success btn-block\",\n      onClick: onSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 25\n      }\n    }, \"Submit\"))));\n  };\n\n  return /*#__PURE__*/React.createElement(Base, {\n    title: \"SignIn Page\",\n    description: \"A page for user to SignIn!\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }\n  }, \"// \", loadingMessage(), errorMessage(), signInForm(), perfromRedirect(), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"text-white text-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }\n  }, JSON.stringify(values)));\n};\n\nexport default Signin;","map":{"version":3,"sources":["E:/Codes/lcomernbootcamp/projfrontend/src/user/Signin.js"],"names":["React","useState","Base","Link","Redirect","signin","authenticate","isAuthenticated","Signin","values","setValues","email","password","error","loading","didRedirect","user","handleChange","name","event","target","value","onSubmit","preventDefault","then","data","catch","console","log","perfromRedirect","role","loadingMessage","errorMessage","display","signInForm","JSON","stringify"],"mappings":"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","sourcesContent":["import React, {useState} from 'react'\r\nimport Base from '../core/Base'\r\nimport {Link, Redirect} from 'react-router-dom'\r\n//importing index.js from auth/helper\r\nimport {signin, authenticate, isAuthenticated} from \"../auth/helper\"\r\n\r\nconst Signin = () => {\r\n    const [values, setValues] = useState({\r\n        email : \"\",\r\n        password : \"\",\r\n        error : \"\",\r\n        loading : false, //for loading message\r\n        //redirect the user to user panel or admin panel based on their role, it is going to come from 'react-router-dom'\r\n        didRedirect : false\r\n    })\r\n\r\n    const {email, password, error, loading, didRedirect} = values\r\n    //isAuthenticated() returns JSON.parse entire local storage object which has this jwt, so we are holding the things\r\n    //that are returned \r\n    const {user} = isAuthenticated()\r\n\r\n    const handleChange = name => event => {\r\n        setValues({...values, error : false, [name] : event.target.value})\r\n    }\r\n\r\n    const onSubmit = event => {\r\n        event.preventDefault()\r\n        setValues({...values, error : false, loading : true})\r\n        signin({email, password})\r\n        .then(data => {\r\n            if(data.error){\r\n                setValues({...values, error : data.error, loading : false})\r\n            } else {\r\n                //authenticate is kind of middleware, and this requires to pass on the data, we just need to give the\r\n                //data and it will set all the values, authenticate() also has next, and whenever there is a next we can \r\n                //fire back a callback\r\n                authenticate(data, () => {\r\n                    //and it ll clear back everythin from the input form\r\n                    setValues({\r\n                        ...values,\r\n                        didRedirect : true\r\n                    })\r\n                })\r\n            }\r\n        })\r\n        .catch(console.log(\"Signin request failed\"))\r\n    }\r\n\r\n    //method to check wether redirect should be done or not and where to redirect\r\n    const perfromRedirect = () => {\r\n        if(didRedirect){\r\n            //didRedirect is an object in our state\r\n            if(user && user.role === 1){\r\n                //if we have a user which is coming from isAuthenticated() and user has lots of properties, \r\n                //if the user role is 1, that means he is an admin, so redirect him to admin panel\r\n                return <p>Redirect To Admin</p>\r\n            } else {\r\n                return <p> Redirect To User Panel</p>\r\n            }\r\n        }\r\n        if(isAuthenticated()){\r\n            //if the user is authenticated, isAuthenticated will give a true or false, if true this ll redirect to Homepage\r\n            return <Redirect to=\"/\" />\r\n        }\r\n    }\r\n\r\n    //method to display loading message\r\n    const loadingMessage = () => {\r\n       return (\r\n           //loading can be true or false, and the component is always true, So based on loading things are going to work\r\n           //if loading is true, then T && T, and this ll execute, else F && T and it ll not execute\r\n           loading && (\r\n               <div className=\"alert alert-info\">\r\n                   <h2>Loading...</h2>\r\n               </div>\r\n           )\r\n       )\r\n    }\r\n    //method to display error message\r\n    const errorMessage = () => {\r\n        return (\r\n            //flex box property of bootstap, show when there is error or show nothing\r\n            <div className=\"row\">\r\n                <div className=\"col-md-6 offset-sm-3 text-left\">\r\n                    <div className=\"alert alert-danger\" style={{display : error ? \"\" : \"none\"}}>\r\n                        {error}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    const signInForm = () => {\r\n        return(\r\n            <div className=\"row\">\r\n                <div className=\"col-md-6 offset-sm-3 text-left\">\r\n                    <form>\r\n                        <div className=\"form-group\">\r\n                            <label className=\"text-light\">Email</label>\r\n                            <input className=\"form-control\" onChange={handleChange(\"email\")} type=\"email\" value={email}/>\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label className=\"text-light\">Password</label>\r\n                            <input className=\"form-control\" onChange={handleChange(\"password\")} type=\"password\" value={password}/>\r\n                        </div>\r\n                        <button className=\"btn btn-success btn-block\" onClick={onSubmit}>Submit</button>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return(\r\n        <Base title=\"SignIn Page\" description=\"A page for user to SignIn!\">\r\n           // {loadingMessage()}\r\n            {errorMessage()}\r\n            {signInForm()}\r\n            {perfromRedirect()}\r\n            <p className=\"text-white text-center\">{JSON.stringify(values)}</p>\r\n        </Base>\r\n    )\r\n}\r\n\r\nexport default Signin;"]},"metadata":{},"sourceType":"module"}